# It seems importing just utils causes a pyton error.
from .utils import *
from .extras import *
from os import path
from datetime import datetime
from werkzeug import secure_filename

'''
    This module serves as the entry point for the conversion process. It utilizes all 
    the other modules and functions to successfully take files through conversion.
'''


def convert(files, job_folder):
    '''
    Main entry point
    '''
    time_stamp = str(datetime.now().strftime("%m-%d-%Y.%H-%M-%S"))
    job_dir = path.join(job_folder, time_stamp)
    os.makedirs(job_dir)

    for file in files:
        file_dir = path.join(job_dir, path.splitext(
            secure_filename(file.filename))[0])
        f = file.read()
        _convert_file(
            {
                "data": f,
                "destination": file_dir,
                "filename": file.filename
            },
            job_dir)

    zip_of_job = zip_up(job_dir, job_dir)

    delete_directory(job_dir)

    return zip_of_job


def _convert_file(file_info, job_dir):
    # Create Proper Filename
    filename = os.path.splitext(file_info["filename"])[0]
    file_info["filename"] = filename

    # Convert docx file to html with Pandoc
    output_html = convert_HTML(
        file_info['data'], file_info['destination'])

    # Tidy up the html generated by Pandoc
    tidied_html = tidy_HTML(output_html)

    # Petty Clean the html
    # meaning run all the custom cleaners
    petty_cleaned_html = petty_clean(tidied_html)

    # Save the result html content to a file
    save_HTML_to_file(
        petty_cleaned_html, file_info['destination'], 'index.html')

    # Copy the images from the media directory to the main root
    copy_media_to_root(file_info['destination'])

    # Normalize those images
    normalize_media_files(file_info['destination'])
