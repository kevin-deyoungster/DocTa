from modules import utils as UTILITIES
from modules import petty_clean as PETTY_CLEANER
from modules import splitter as SPLITTER
from os import path, makedirs
from werkzeug import secure_filename
from uuid import uuid4
from pathlib import Path

LOG_TAG = "Convertor"
"""
    This module serves as the entry point for the conversion process. It utilizes all 
    the other modules and functions to successfully take files through conversion.
"""


def convert(files, job_folder):
    jobs_dir = Path(job_folder) / str(uuid4())
    jobs_dir.mkdir(parents=True)

    for file in files:
        safe_filename = secure_filename(Path(file.filename).stem)
        job_dir = jobs_dir / safe_filename
        _convert_file(
            {"data": file.read(), "destination": job_dir, "filename": safe_filename},
            jobs_dir,
        )
        print(f"[{LOG_TAG}]: Conversion of '{file.filename}' Complete")

    zip_of_job = UTILITIES.zip_up(jobs_dir, jobs_dir)

    UTILITIES.delete_directory(jobs_dir)

    return zip_of_job


def _convert_file(file_info, job_dir):
    DESTINATION = file_info["destination"]
    FILE_CONTENT = file_info["data"]
    FILENAME = file_info["filename"]

    print(f"\n[{LOG_TAG}]: Converting '{FILENAME}'")

    # Create the File's Directory [ because if there isn't any image in the file it won't create the folder]
    makedirs(DESTINATION)

    # Convert docx file to html with Pandoc
    output_html = UTILITIES.convert_HTML(FILE_CONTENT, str(DESTINATION))
    print(f"[{LOG_TAG}]: Converted to HTML with Pandoc")

    # Tidy up the html generated by Pandoc
    tidied_html = UTILITIES.tidy_HTML(output_html)
    print(f"[{LOG_TAG}]: Tidied HTML with HTMLTidy")

    # Petty Clean the html: Run Custom Cleaners
    print(f"[{LOG_TAG}]: Petty Cleaning...")
    petty_cleaned_soup = PETTY_CLEANER.petty_clean(tidied_html)

    # Render Math Formulas if needed
    print(f"[{LOG_TAG}]: Rendering Math Formulas...")
    math_rendered_soup = UTILITIES.render_maths_symbols(petty_cleaned_soup, DESTINATION)
    petty_cleaned_html = math_rendered_soup.prettify().encode("utf-8")

    # Save the result html content to a file
    UTILITIES.save_HTML_to_file(petty_cleaned_html, DESTINATION, "index.html")
    print(f"[{LOG_TAG}]: Saved HTML Files")

    # Copy the images from the media directory to the main root
    print(f"[{LOG_TAG}]: Moving Images to Root Folder")
    UTILITIES.copy_images_from_folder_to_root(
        path.join(DESTINATION, "media"), DESTINATION
    )

    # Normalize those images
    print(f"[{LOG_TAG}]: Normalizing Images and renaming them")
    UTILITIES.normalize_media_files(DESTINATION)

    # Rename all images again
    UTILITIES.rename_image_files(DESTINATION)

    # Split the file
    print(f"[{LOG_TAG}]: Checking for Split-Marks...")
    index_html = path.join(DESTINATION, "index.html")
    SPLITTER.split_into_sections(index_html, ["~", "@", "$"], DESTINATION)

